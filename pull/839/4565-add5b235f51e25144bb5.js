"use strict";(self.webpackChunkterra_toolkit=self.webpackChunkterra_toolkit||[]).push([[4565],{94565:function(e,n,t){t.r(n),t.d(n,{default:function(){return g}});var r=t(87462),o=t(44925),l=(t(67294),t(81254)),a=["components"],i={},p="wrapper";function g(e){var n=e.components,t=(0,o.Z)(e,a);return(0,l.mdx)(p,(0,r.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"logger"},"Logger"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"terra-cli")," provides a logger for use when creating cli tools. It is built on top of the ",(0,l.mdx)("a",{parentName:"p",href:"https://github.com/npm/npmlog"},"npm logger")," and supports all log levels that the npm logger supports. It automatically provides a ",(0,l.mdx)("inlineCode",{parentName:"p"},"terra")," heading to group terra cli commands in one namespace and a ",(0,l.mdx)("inlineCode",{parentName:"p"},"prefix")," prop to group all logs from a given file together."),(0,l.mdx)("h2",{id:"example"},"Example"),(0,l.mdx)("p",null,"The following will log at the info level."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre"},"const { Logger } = require('@cerner/terra-cli');\n\nconst logger = new Logger({ prefix: '[test-logger]' });\n\nlogger.info('Logging something at the info level');\n")))}g.isMDXComponent=!0},87462:function(e,n,t){function r(){return r=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},r.apply(this,arguments)}t.d(n,{Z:function(){return r}})},44925:function(e,n,t){function r(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}t.d(n,{Z:function(){return r}})}}]);